package com.techlabs.app.service;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.techlabs.app.dto.UserDTO;
import com.techlabs.app.dto.UserResponseDTO;
import com.techlabs.app.entity.User;
import com.techlabs.app.exception.UserException;
import com.techlabs.app.repository.UserRepository;
import com.techlabs.app.util.PagedResponse;

@Service
public class AdminServiceImpl implements AdminService{
	
	
	private UserRepository userRepository;

	public AdminServiceImpl(UserRepository userRepository) {
		super();
		this.userRepository = userRepository;
	}

	@Override
	public UserResponseDTO createUser(UserDTO userDTO) {
		userDTO.setId(0);
		User user = convertUserDTOToUserEntity(userDTO);
		userRepository.save(user);
		return convertUserEntityToUserDTO(user);
	}

	@Override
	public PagedResponse<UserResponseDTO> getAllUsers(int page, int size, String sortBy, String direction) {
		Sort sort = direction.equalsIgnoreCase(Sort.Direction.DESC.name())? Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();
		
		Pageable pageable = (Pageable) PageRequest.of(page, size, sort);
		
		Page<User> pages = userRepository.findAll(pageable);
		List<User> allBlogs = pages.getContent();
		List<UserResponseDTO> allBlogsDTO = convertUserListToDTO(allBlogs);
		
		return new PagedResponse<UserResponseDTO>(allBlogsDTO, pages.getNumber(), pages.getSize(), pages.getTotalElements(), pages.getTotalPages(), pages.isLast());
	}

	@Override
	public UserResponseDTO getUserById(int id) {
		
		User user = userRepository.findById(id).orElseThrow(()->new UserException("User not found!!"));
		
		return convertUserEntityToUserDTO(user);
	}

	@Override
	public UserResponseDTO updateUser(int id, UserDTO userDTO) {
		User user = userRepository.findById(id).orElseThrow(()->new UserException("User not found!!"));
		
		user.setFirstName(userDTO.getFirstName());
        user.setLastName(userDTO.getLastName());
        user.setUsername(userDTO.getUsername());
        user.setEmail(userDTO.getEmail());
        user.setPassword(userDTO.getPassword());
        user.setAdmin(userDTO.isAdmin());
        user.setActive(userDTO.isActive());
        
        userRepository.save(user);
        
        return convertUserEntityToUserDTO(user);
	}

	@Override
	public void deleteUser(int id) {
		User user = userRepository.findById(id).orElseThrow(()->new UserException("User not found!!"));
		
		userRepository.delete(user);
		
	}

}
