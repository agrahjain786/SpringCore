package com.techlabs.app.controller;


import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.techlabs.app.dto.BlogDTO;
import com.techlabs.app.exception.BlogNotFoundException;
import com.techlabs.app.service.BlogService;
import com.techlabs.app.util.PagedResponse;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;

@Tag(name = "Blog", description = "Blog All APIs")
@RestController
@RequestMapping("/api/blog")
public class BlogController {
	
	
	private BlogService blogService;

	public BlogController(BlogService blogService) {
		super();
		this.blogService = blogService;
	}
	
	
	@Operation(
		      summary = "Retrieve All the Blogs",
		      description = "Get the paginated list of Blogs",
		      tags = { "Blogs", "get" })
//	@ApiResponses({
//	      @ApiResponse(responseCode = "200", content = { @Content(schema = @Schema(implementation = PagedResponse.class), mediaType = "application/json") }),
//	      @ApiResponse(responseCode = "404", content = { @Content(schema = @Schema()) }),
//	      @ApiResponse(responseCode = "500", content = { @Content(schema = @Schema()) }) })
	@GetMapping
	public ResponseEntity<PagedResponse<BlogDTO>> getAllBlogs(
			@RequestParam(name = "page", defaultValue = "0") int page,
			@RequestParam(name = "size", defaultValue = "5") int size,
			@RequestParam(name = "sortBy", defaultValue = "id") String sortBy,
			@RequestParam(name = "direction", defaultValue = "asc") String direction){
		
		PagedResponse<BlogDTO> blogs = blogService.getAllBlogs(page,size,sortBy,direction);
		
		return new ResponseEntity<PagedResponse<BlogDTO>>(blogs, HttpStatus.OK);
		
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<BlogDTO> getInstructorById(@PathVariable(name="id")int id){
		BlogDTO blogDTO = blogService.getBlogById(id);
		
		if(blogDTO == null) {
			throw new BlogNotFoundException("No Blog found with this id "+ id);
		}
		
		return new ResponseEntity<BlogDTO>(blogDTO, HttpStatus.OK);
		
	}
	

}
